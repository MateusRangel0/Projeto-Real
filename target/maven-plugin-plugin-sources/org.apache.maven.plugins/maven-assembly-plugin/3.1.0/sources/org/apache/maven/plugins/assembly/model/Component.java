// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.3,
// any modifications will be overwritten.
// ==============================================================

package org.apache.maven.plugins.assembly.model;

/**
 * Describes the component layout and packaging.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class Component
    implements java.io.Serializable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field moduleSets.
     */
    private java.util.List<ModuleSet> moduleSets;

    /**
     * Field fileSets.
     */
    private java.util.List<FileSet> fileSets;

    /**
     * Field files.
     */
    private java.util.List<FileItem> files;

    /**
     * Field dependencySets.
     */
    private java.util.List<DependencySet> dependencySets;

    /**
     * Field repositories.
     */
    private java.util.List<Repository> repositories;

    /**
     * Field containerDescriptorHandlers.
     */
    private java.util.List<ContainerDescriptorHandlerConfig> containerDescriptorHandlers;

    /**
     * Field modelEncoding.
     */
    private String modelEncoding = "UTF-8";


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addContainerDescriptorHandler.
     * 
     * @param containerDescriptorHandlerConfig
     */
    public void addContainerDescriptorHandler( ContainerDescriptorHandlerConfig containerDescriptorHandlerConfig )
    {
        getContainerDescriptorHandlers().add( containerDescriptorHandlerConfig );
    } //-- void addContainerDescriptorHandler( ContainerDescriptorHandlerConfig )

    /**
     * Method addDependencySet.
     * 
     * @param dependencySet
     */
    public void addDependencySet( DependencySet dependencySet )
    {
        getDependencySets().add( dependencySet );
    } //-- void addDependencySet( DependencySet )

    /**
     * Method addFile.
     * 
     * @param fileItem
     */
    public void addFile( FileItem fileItem )
    {
        getFiles().add( fileItem );
    } //-- void addFile( FileItem )

    /**
     * Method addFileSet.
     * 
     * @param fileSet
     */
    public void addFileSet( FileSet fileSet )
    {
        getFileSets().add( fileSet );
    } //-- void addFileSet( FileSet )

    /**
     * Method addModuleSet.
     * 
     * @param moduleSet
     */
    public void addModuleSet( ModuleSet moduleSet )
    {
        getModuleSets().add( moduleSet );
    } //-- void addModuleSet( ModuleSet )

    /**
     * Method addRepository.
     * 
     * @param repository
     */
    public void addRepository( Repository repository )
    {
        getRepositories().add( repository );
    } //-- void addRepository( Repository )

    /**
     * Method getContainerDescriptorHandlers.
     * 
     * @return List
     */
    public java.util.List<ContainerDescriptorHandlerConfig> getContainerDescriptorHandlers()
    {
        if ( this.containerDescriptorHandlers == null )
        {
            this.containerDescriptorHandlers = new java.util.ArrayList<ContainerDescriptorHandlerConfig>();
        }

        return this.containerDescriptorHandlers;
    } //-- java.util.List<ContainerDescriptorHandlerConfig> getContainerDescriptorHandlers()

    /**
     * Method getDependencySets.
     * 
     * @return List
     */
    public java.util.List<DependencySet> getDependencySets()
    {
        if ( this.dependencySets == null )
        {
            this.dependencySets = new java.util.ArrayList<DependencySet>();
        }

        return this.dependencySets;
    } //-- java.util.List<DependencySet> getDependencySets()

    /**
     * Method getFileSets.
     * 
     * @return List
     */
    public java.util.List<FileSet> getFileSets()
    {
        if ( this.fileSets == null )
        {
            this.fileSets = new java.util.ArrayList<FileSet>();
        }

        return this.fileSets;
    } //-- java.util.List<FileSet> getFileSets()

    /**
     * Method getFiles.
     * 
     * @return List
     */
    public java.util.List<FileItem> getFiles()
    {
        if ( this.files == null )
        {
            this.files = new java.util.ArrayList<FileItem>();
        }

        return this.files;
    } //-- java.util.List<FileItem> getFiles()

    /**
     * Get the modelEncoding field.
     * 
     * @return String
     */
    public String getModelEncoding()
    {
        return this.modelEncoding;
    } //-- String getModelEncoding()

    /**
     * Method getModuleSets.
     * 
     * @return List
     */
    public java.util.List<ModuleSet> getModuleSets()
    {
        if ( this.moduleSets == null )
        {
            this.moduleSets = new java.util.ArrayList<ModuleSet>();
        }

        return this.moduleSets;
    } //-- java.util.List<ModuleSet> getModuleSets()

    /**
     * Method getRepositories.
     * 
     * @return List
     */
    public java.util.List<Repository> getRepositories()
    {
        if ( this.repositories == null )
        {
            this.repositories = new java.util.ArrayList<Repository>();
        }

        return this.repositories;
    } //-- java.util.List<Repository> getRepositories()

    /**
     * Method removeContainerDescriptorHandler.
     * 
     * @param containerDescriptorHandlerConfig
     */
    public void removeContainerDescriptorHandler( ContainerDescriptorHandlerConfig containerDescriptorHandlerConfig )
    {
        getContainerDescriptorHandlers().remove( containerDescriptorHandlerConfig );
    } //-- void removeContainerDescriptorHandler( ContainerDescriptorHandlerConfig )

    /**
     * Method removeDependencySet.
     * 
     * @param dependencySet
     */
    public void removeDependencySet( DependencySet dependencySet )
    {
        getDependencySets().remove( dependencySet );
    } //-- void removeDependencySet( DependencySet )

    /**
     * Method removeFile.
     * 
     * @param fileItem
     */
    public void removeFile( FileItem fileItem )
    {
        getFiles().remove( fileItem );
    } //-- void removeFile( FileItem )

    /**
     * Method removeFileSet.
     * 
     * @param fileSet
     */
    public void removeFileSet( FileSet fileSet )
    {
        getFileSets().remove( fileSet );
    } //-- void removeFileSet( FileSet )

    /**
     * Method removeModuleSet.
     * 
     * @param moduleSet
     */
    public void removeModuleSet( ModuleSet moduleSet )
    {
        getModuleSets().remove( moduleSet );
    } //-- void removeModuleSet( ModuleSet )

    /**
     * Method removeRepository.
     * 
     * @param repository
     */
    public void removeRepository( Repository repository )
    {
        getRepositories().remove( repository );
    } //-- void removeRepository( Repository )

    /**
     * Set set of components which filter various container
     * descriptors out of
     *             the normal archive stream, so they can be
     * aggregated then added.
     * 
     * @param containerDescriptorHandlers
     */
    public void setContainerDescriptorHandlers( java.util.List<ContainerDescriptorHandlerConfig> containerDescriptorHandlers )
    {
        this.containerDescriptorHandlers = containerDescriptorHandlers;
    } //-- void setContainerDescriptorHandlers( java.util.List )

    /**
     * Set specifies which dependencies to include in the assembly.
     * A
     *             dependencySet is specified by providing one or
     * more of
     *             &lt;dependencySet&gt; subelements.
     * 
     * @param dependencySets
     */
    public void setDependencySets( java.util.List<DependencySet> dependencySets )
    {
        this.dependencySets = dependencySets;
    } //-- void setDependencySets( java.util.List )

    /**
     * Set specifies which groups of files to include in the
     * assembly. A
     *             fileSet is specified by providing one or more of
     * &lt;fileSet&gt;
     *             subelements.
     * 
     * @param fileSets
     */
    public void setFileSets( java.util.List<FileSet> fileSets )
    {
        this.fileSets = fileSets;
    } //-- void setFileSets( java.util.List )

    /**
     * Set specifies which single files to include in the assembly.
     * A file
     *             is specified by providing one or more of
     * &lt;file&gt;
     *             subelements.
     * 
     * @param files
     */
    public void setFiles( java.util.List<FileItem> files )
    {
        this.files = files;
    } //-- void setFiles( java.util.List )

    /**
     * Set the modelEncoding field.
     * 
     * @param modelEncoding
     */
    public void setModelEncoding( String modelEncoding )
    {
        this.modelEncoding = modelEncoding;
    } //-- void setModelEncoding( String )

    /**
     * Set specifies which module files to include in the assembly.
     * A moduleSet
     *             is specified by providing one or more of
     * &lt;moduleSet&gt;
     *             subelements.
     * 
     * @param moduleSets
     */
    public void setModuleSets( java.util.List<ModuleSet> moduleSets )
    {
        this.moduleSets = moduleSets;
    } //-- void setModuleSets( java.util.List )

    /**
     * Set specifies a set of repositories to include in the
     * assembly. A
     *             repository is specified by providing one or more
     * of
     *             &lt;repository&gt; subelements.
     * 
     * @param repositories
     */
    public void setRepositories( java.util.List<Repository> repositories )
    {
        this.repositories = repositories;
    } //-- void setRepositories( java.util.List )

}
